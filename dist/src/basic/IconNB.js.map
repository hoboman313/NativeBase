{"version":3,"sources":["../../../src/basic/IconNB.js"],"names":["IconNB","iconType","undefined","context","theme","variables","iconFamily","Icon","Ionicons","setIcon","props","type","nextProps","nextState","_root","c","Component","contextTypes","PropTypes","object","propTypes","style","oneOfType","number","array","oneOf","StyledIconNB","mapPropsToStyleNames"],"mappings":"y1BAAA,4B,2CACA,qC,mDAEA,iEAEA,4D,iDAEA,mE,68BAEMA,O,8QAKIC,Q,CAAU,CAChB,GAAIA,UAAYC,SAAZ,EAAyB,KAAKC,OAAL,CAAaC,KAA1C,CAAiD,CAC/CH,SAAW,KAAKE,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDC,SAAjD,CAA2DC,UAAtE,CACD,CACD,OAAQL,QAAR,EACA,IAAK,UAAL,CACE,KAAKM,IAAL,CAAYC,kBAAZ,CACA,MACF,QACE,KAAKD,IAAL,CAAYC,kBAAZ,CALF,CAOD,C,+DAEoB,CACnB,KAAKC,OAAL,CAAa,KAAKC,KAAL,CAAWC,IAAxB,EACD,C,gEAEmBC,S,CAAWC,S,CAAW,CACxC,GAAID,UAAUD,IAAV,EAAkB,KAAKD,KAAL,CAAWC,IAAX,EAAmBC,UAAUD,IAAnD,CAAyD,CACvD,KAAKF,OAAL,CAAaG,UAAUD,IAAvB,EACD,CACF,C,uCAEQ,iBACP,MAAO,oCAAM,IAAN,WAAW,IAAK,sBAAM,QAAKG,KAAL,CAAaC,CAAnB,EAAhB,EAA2C,KAAKL,KAAhD,mDAAP,CACD,C,oBA9BkBM,gB,EAAfhB,M,CACGiB,Y,CAAe,CACpBb,MAAOc,oBAAUC,MADG,C,CAgCxBnB,OAAOoB,SAAP,CAAmB,CACjBC,MAAOH,oBAAUI,SAAV,CAAoB,CAACJ,oBAAUC,MAAX,CAAmBD,oBAAUK,MAA7B,CAAqCL,oBAAUM,KAA/C,CAApB,CADU,CAEjBb,KAAMO,oBAAUO,KAAV,CAAgB,CAAC,UAAD,CAAhB,CAFW,CAAnB,CAKA,GAAMC,cAAe,yCAAa,mBAAb,CAAkC,EAAlC,CAAsCC,8BAAtC,EAA4D3B,MAA5D,CAArB,C,QAEyBA,M,CAAhB0B,Y","file":"IconNB.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\n\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\r\n\r\nclass IconNB extends Component {\r\n  static contextTypes = {\r\n    theme: PropTypes.object\r\n  };\r\n\r\n  setIcon(iconType) {\r\n    if (iconType == undefined && this.context.theme) {\r\n      iconType = this.context.theme['@@shoutem.theme/themeStyle'].variables.iconFamily;\r\n    }\r\n    switch (iconType) {\r\n    case 'Ionicons':\r\n      this.Icon = Ionicons;\r\n      break;\r\n    default:\r\n      this.Icon = Ionicons;\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setIcon(this.props.type);\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if (nextProps.type && this.props.type != nextProps.type) {\r\n      this.setIcon(nextProps.type);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <this.Icon ref={c => (this._root = c)} {...this.props} />;\r\n  }\r\n}\r\n\r\nIconNB.propTypes = {\r\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\r\n  type: PropTypes.oneOf(['Ionicons'])\r\n};\r\n\r\nconst StyledIconNB = connectStyle('NativeBase.IconNB', {}, mapPropsToStyleNames)(IconNB);\r\n\r\nexport { StyledIconNB as IconNB };\r\n"]}